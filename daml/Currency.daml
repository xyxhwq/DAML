module Currency where

template Publisher
  with
    name: Party
  where
    signatory name
    key name: Party
    maintainer key


    nonconsuming choice Publish: ()
      with
        amount : Decimal
        owner : Party
      controller
        name
      do
        create Owner with
          name = owner
          cash = Currency with publisher = name, amount
        return ()

    nonconsuming choice Transfer: ()
      with
        transferAmount : Decimal
        giver: Owner
        receiver: Owner
      controller
        giver.name
      do
        let delta = giver.cash.amount - transferAmount
        assertMsg "not enough cash" (delta < 0.0)
        
        create giver with cash = giver.cash with amount = giver.cash.amount - transferAmount
        create receiver with cash = receiver.cash with amount = receiver.cash.amount + transferAmount
        return ()

type OwnerKey = (Party, Party)
template Owner
  with
    name: Party
    cash: Currency
  where
    signatory cash.publisher
    key (name, cash.publisher): OwnerKey
    maintainer key._1

template Currency
  with
    publisher : Party
    amount : Decimal
  where
    signatory publisher
